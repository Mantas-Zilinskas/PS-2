@model List<WebAplicationTestMVC.Models.Flashcard>
@using WebAplicationTestMVC.Utilities


<!DOCTYPE html>
<html manifest="cache.manifest">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Flashcards</title>
    <link href="static/bootstrap/css/bootstrap.min.css" rel="stylesheet" />

    <style>
        .question-text {
            font-size: 28px;
        }

        div#three-items {
            text-align: center;
        }

        #answer-content {
            display: none;
            flex-direction: column;
            align-items: center;
        }

        #flashcard-container {
            perspective: 1000px;
            width: 75em;
            height: 20em;
            margin: 50px auto;
            position: relative;
            border: groove;
            border-radius: 50px;
        }

        .flashcard-content {
            flex-direction: column;
            align-items: center;
        }

        .flashcard-footer {
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 20px;
        }

        .dropdown-container {
            position: relative;
            display: inline-block;
        }

        .dot {
            width: 20px;
            height: 20px;
            background-color: #3498db;
            border-radius: 50%;
            cursor: pointer;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }

            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

                .dropdown-content a:hover {
                    background-color: #f1f1f1;
                }

        #three-items, .btn-warning, .btn-success {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container" id="decks">decks: </div>
    <hr class="soften" />


    <div id="bad-indicator" class="flashcard-content" style="background-color: red;"></div>
    <div id="good-indicator" class="flashcard-content" style="background-color: green;"></div>

    <div id="flashcard-container">
        <div class="dropdown-container">
            <div class="dot" onclick="$('.dropdown-content').toggle();"></div>
            <div class="dropdown-content">
                <a style="color:brown" href="#" onclick="editFlashcard()">Edit this flashcard</a>
                <a style="color:red" href="#" onclick="deleteFlashcard()">Ignore this flashcard</a>
            </div>
        </div>
        <div id="three-items" style="display:none;">
            <div id="question" class="flashcard-content">
                <div id="question-text"></div>
                <button type="button" class="btn btn-primary btn-lg" onclick="showAnswer()">Show answer</button>
            </div>
            <div id="answer-content" class="flashcard-content">
                <button type="button" class="btn btn-primary btn-lg" onclick="hideAnswer()">Hide answer</button>
                <div id="answer-text"></div>
            </div>
        </div>
    </div>

    <div class="flashcard-footer">
        <button type="button" class="btn btn-start btn-lg" onclick="startLearning()">Start</button>
        <button type="button" class="btn btn-warning btn-lg" onclick="showNext(false)">Bad</button>
        <button type="button" class="btn btn-success btn-lg" onclick="showNext(true)">Good</button>
    </div>

    <hr class="soften" />

    <script src="static/js/jquery-2.1.0.min.js"></script>
    <script src="static/bootstrap/js/bootstrap.min.js"></script>
    <script src="static/js/flashcard-ahhh.js"></script>
    
    <script>
        let currentIndex = -1;
        let cards = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
        let studyStartTime;
        let studyEndTime;
        let isWaitingForGood = false;

        function startLearning() {
            studyStartTime = new Date();
            shuffle(cards);
            $('.btn-start').hide();
            $('.btn-warning, .btn-success, #three-items').show();
            currentIndex = 0;
            showNext();
        }


        function sendStudyDurationToServer() {
            $.post("/Flashcards/LogStudyTime", {
                startTime: studyStartTime.toISOString(),
                endTime: studyEndTime.toISOString()
            }).done(function (data) {
                const studyTime = 'You have finished the cards. Total study time: ' + data;
                alert(studyTime); 
            });
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                let j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }
        function showNext(isGood) {
            if (isGood) {
                currentIndex++;
            } else {
                let badCard = cards[currentIndex];
                cards.push(badCard);
                cards.splice(currentIndex, 1); // to remove the bad card from its current position
            }

            if (currentIndex < cards.length) {
                $('#question-text').text(cards[currentIndex].question);
                $('#answer-text').text(cards[currentIndex].answer);
                hideAnswer();
            } else {
                studyEndTime = new Date();
                sendStudyDurationToServer();
            }

        }
        
        function showAnswer() {
            $('#answer-content').show();
            $('#question .btn-primary').hide();
        }

        function hideAnswer() {
            $('#answer-content').hide();
            $('#question .btn-primary').show();
        }

        function editFlashcard() {
            let newQuestion = prompt("Enter the updated question:", cards[currentIndex].question);
            let newAnswer = prompt("Enter the updated answer:", cards[currentIndex].answer);

            if (newQuestion !== null && newAnswer !== null) {
                cards[currentIndex].question = newQuestion;
                cards[currentIndex].answer = newAnswer;
                $('#question-text').text(newQuestion);
                $('#answer-text').text(newAnswer);

                // Inform the server about the change
                $.post("/Home/EditCard", {
                    id: cards[currentIndex].id,
                    question: newQuestion,
                    answer: newAnswer
                });
            }
        }

        function deleteFlashcard() {
            if (confirm("Are you sure you want to delete this flashcard?")) {
                let cardIdToDelete = cards[currentIndex].id;
                cards.splice(currentIndex, 1);

                if (cards.length === 0) {
                    alert('No more flashcards available.');
                    // Reset UI or navigate to another page
                } else {
                    if (currentIndex >= cards.length) {
                        currentIndex--;
                    }
                    showNext(true);
                }

                // Inform the server about the deletion
                $.post("/Home/DeleteCard", { id: cardIdToDelete });
            }
        }
    </script>
</body>
</html>