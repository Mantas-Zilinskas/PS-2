@using Newtonsoft.Json;
@{
}
@model List<WebAplicationTestMVC.Models.FlashcardDTO>

<!DOCTYPE html>
<html manifest="cache.manifest">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Flashcards</title>
    <link href="static/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/rsc.css" asp-append-version="true" />
    <div class="waveWrapper waveAnimation">
        <div class="waveWrapperInner bgTop">
            <div class="wave waveTop" style="background-image: url('http://front-end-noobs.com/jecko/img/wave-top.png')"></div>
        </div>
        <div class="waveWrapperInner bgMiddle">
            <div class="wave waveMiddle" style="background-image: url('http://front-end-noobs.com/jecko/img/wave-mid.png')"></div>
        </div>
        <div class="waveWrapperInner bgBottom">
            <div class="wave waveBottom" style="background-image: url('http://front-end-noobs.com/jecko/img/wave-bot.png')"></div>
        </div>
    </div>
    <style>
        .question-text {
            font-size: 28px;
        }

        div#three-items {
            text-align: center;
        }

        #answer-content {
            display: none;
            flex-direction: column;
            align-items: center;
        }

        #flashcard-container {
            perspective: 1000px;
            width: 75em;
            height: 20em;
            margin: 50px auto;
            position: relative;
            border: groove;
            border-radius: 50px;
        }

        .flashcard-content {
            flex-direction: column;
            align-items: center;
        }

        .flashcard-footer {
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 20px;
        }

        .dropdown-container {
            position: relative;
            display: inline-block;
        }

        .dot {
            width: 20px;
            height: 20px;
            background-color: #3498db;
            border-radius: 50%;
            cursor: pointer;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }

            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

                .dropdown-content a:hover {
                    background-color: #f1f1f1;
                }

        #answer-Input, #three-items, .btn-warning, .btn-submit, .btn-next {
            display: none;
        }
    </style>
</head>
<body>
    <hr class="soften" />
    <div id="bad-indicator" class="flashcard-content" style="background-color: red;"></div>
    <div id="good-indicator" class="flashcard-content" style="background-color: green;"></div>

    <div id="flashcard-container">
        <div class="dropdown-container">
            <div class="dot" onclick="$('.dropdown-content').toggle();"></div>
            <div class="dropdown-content">
                <a style="color:brown" href="#" onclick="editFlashcard()">Edit this flashcard</a>
                <a style="color:red" href="#" onclick="deleteFlashcard()">Ignore this flashcard</a>
            </div>
        </div>
        <div class="row">
            <div align="left" class="col-sm-2" style="margin-left: 20px">
                <h5 id="time"></h5>
                <h5 id="card-time"></h5>
            </div>
            <div id="three-items" style="display:none;" class="col-sm-8">
                <div id="question" class="flashcard-content">
                    <div id="question-text"></div>
                </div>
                <div id="answer-content" class="flashcard-content">
                    <h1 id="answer-status"></h1>
                    <div id="answer-text"></div>
                    <div id="your-answer"></div>
                </div>
            </div>
            <div class="col-sm-2"></div>
        </div>
    </div>

    <div class="flashcard-footer">
        <button type="button" class="btn btn-start btn-lg" onclick="startLearning()">Start</button>
        <input type="text" id="answer-Input">
        <button type="button" class="btn btn-submit btn-lg" onclick="checkAnswer()">Submit</button>
        <button type="button" class="btn btn-next btn-lg" onclick="showNext()">Next card</button>
    </div>

    <hr class="soften" />

    <script type="text/javascript">
        var studySetId = @Model[0].StudySetId;
    </script>

<script src="static/js/jquery-2.1.0.min.js"></script>
    <script src="static/bootstrap/js/bootstrap.min.js"></script>
    <script src="static/js/flashcard-ahhh.js"></script>
    <script>
        let cardTime = @ViewBag.time;
        var studyStartTime;
        let time = 0;
        let cardFlag = true;
        let flag = true;
        let currentIndex = -1;
        let cards = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        function startLearning() {
            $('#time').text("Total time: 0");
            $.post("/Flashcards/GetCurrentTime").done(function (data) { 
                studyStartTime = data;
                shuffle(cards);
                $('.btn-start').hide();
                $('.btn-submit, #three-items, #answer-Input').show();
                currentIndex = 0;
                count();

                if (cardTime > 0) { 
                    $('#card-time').text("remaining time: " + cardTime);
                    decrement();
                }

                showNext();
            });
        }

        async function count() {
            $.post("/Flashcards/CountUp", {
                startTime: studyStartTime
            }).done(function (data) {
                time = data;
                $('#time').text("Total time: " + time);
                if (flag) { 
                    count();
                }
            });
        }

        async function decrement() {
            $.post("/Flashcards/CountDown", {
                time: cardTime
            }).done(function (data) {
                if (flag && cardFlag) {
                    if (data < 0) { 
                        let badCard = cards[currentIndex];
                        cards.push(badCard);
                        cards.splice(currentIndex, 1);
                        showNext();
                        cardTime = @ViewBag.time;

                    }else
                         cardTime = data;

                    $('#card-time').text("remaining time: " + cardTime);
                        decrement();
                }
            });
        }

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                let j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function checkAnswer(answer = false) {
            var userInput = document.getElementById("answer-Input").value;
            if (userInput != "") {
                cardFlag = false;
                var answerStatus = document.getElementById("answer-status");

                if (0 == userInput.localeCompare(cards[currentIndex].Answer)) {
                    cardTime = @ViewBag.time;
                    answerStatus.textContent = "Correct";
                    answerStatus.className = "correct-answer"; 
                    $('#answer-text').hide();
                    $('#answer-content').show();
                    currentIndex++;
                } else {
                    answerStatus.textContent = "Wrong";
                    answerStatus.className = "wrong-answer"; 
                    $('#answer-text').show();
                    $('#answer-content').show();
                    let badCard = cards[currentIndex];
                    cards.push(badCard);
                    cards.splice(currentIndex, 1);
                }

                $('#your-answer').text("Your answer: " + userInput);
                $('#your-answer').show();
                $('.btn-submit, #answer-Input').hide();
                $('.btn-next').show();
                if (currentIndex >= cards.length) {
                    flag = false;
                }
            }
        }

        function showNext() {

            if (@ViewBag.time > 0 && cardFlag == false) {
                cardTime = @ViewBag.time;
                cardFlag = true;
                $('#card-time').text("remaining time: " + cardTime);
                decrement();
            }

            $('#answer-content').hide();

            if (currentIndex < cards.length) {
                $('#question-text').text(cards[currentIndex].Question);
                $('#answer-text').text("Correct answer: " + cards[currentIndex].Answer);
                $('.btn-submit, #answer-Input').show();
                $('.btn-next, #your-answer').hide();
                document.getElementById("answer-Input").value = "";
            } else {
                flag = false;
                const studyTime = 'You have finished the cards.'
                alert(studyTime);
            }
        }
        function finishSession() {
            flag = false; 
            var studySetId = ...; 
            sendTimeToServer(studySetId, time);
            alert('You have finished the cards. Total time spent: ' + time + ' seconds.');
        }

        function sendTimeToServer(studySetId, timeSpent) {
            $.post('/StudySet/RecordStudyTime', { studySetId: studySetId, timeSpent: timeSpent })
                .done(function (data) {
                    console.log('Time was recorded successfully.');
                }).fail(function () {
                    console.log('Error recording time.');
                });
        }

        function editFlashcard() {
            let newQuestion = prompt("Enter the updated question:", cards[currentIndex].Question);
            let newAnswer = prompt("Enter the updated answer:", cards[currentIndex].Answer);

            if (newQuestion !== null && newAnswer !== null) {
                cards[currentIndex].Question = newQuestion;
                cards[currentIndex].Answer = newAnswer;
                $('#question-text').text(newQuestion);
                $('#answer-text').text(newAnswer);

             
                $.post("/Home/EditCard", {
                    Id: cards[currentIndex].Id,
                    Question: newQuestion,
                    Answer: newAnswer
                });
            }
        }

        function deleteFlashcard() {
            if (confirm("Are you sure you want to delete this flashcard?")) {
                let cardIdToDelete = cards[currentIndex].Id;
                cards.splice(currentIndex, 1);

                if (cards.length === 0) {
                    alert('No more flashcards available.');
                   
                } else {
                    if (currentIndex >= cards.length) {
                        currentIndex--;
                    }
                    showNext(true);
                }
    
                $.post("/Home/DeleteCard", { Id: cardIdToDelete });
            }
        }
    </script>
</body>
</html>